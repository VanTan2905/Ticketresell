// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Core.Context;

#nullable disable

namespace TicketResell.Repositories.Migrations
{
    [DbContext(typeof(TicketResellManagementContext))]
    [Migration("20241025143758_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Core.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A0BEBBEB954");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Chat", b =>
                {
                    b.Property<string>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ChatId");

                    b.HasIndex(new[] { "ReceiverId" }, "IX_Chat_ReceiverId");

                    b.HasIndex(new[] { "SenderId" }, "IX_Chat_SenderId");

                    b.ToTable("Chat", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BuyerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BCF6786352F");

                    b.HasIndex(new[] { "BuyerId" }, "IX_Order_BuyerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("TicketId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("OrderDetailId")
                        .HasName("PK__OrderDet__D3B9D36C61677EDA");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderDetail_OrderId");

                    b.HasIndex(new[] { "TicketId" }, "IX_OrderDetail_TicketId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SellerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RatingId")
                        .HasName("PK__Rating__FCCDF87C6FC41DB2");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Revenue", b =>
                {
                    b.Property<string>("RevenueId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Revenue1")
                        .HasColumnType("float")
                        .HasColumnName("Revenue");

                    b.Property<string>("SellerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RevenueId")
                        .HasName("PK__Revenue__275F16DD1765A79B");

                    b.HasIndex(new[] { "SellerId" }, "IX_Revenue_SellerId");

                    b.ToTable("Revenue", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rolename")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1AE4BFB3F2");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.SellConfig", b =>
                {
                    b.Property<string>("SellConfigId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Commision")
                        .HasColumnType("float");

                    b.HasKey("SellConfigId")
                        .HasName("PK__SellConf__42545BD905ACD877");

                    b.ToTable("SellConfig", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Qr")
                        .HasColumnType("image");

                    b.Property<string>("SellerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__712CC607A2C872D9");

                    b.HasIndex(new[] { "SellerId" }, "IX_Ticket_SellerId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Bank")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BankType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cccd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Gmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SellAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SellConfigId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Sex")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Verify")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CC4CA0A0D49E");

                    b.HasIndex(new[] { "SellConfigId" }, "IX_User_SellConfigId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("TicketCategory", b =>
                {
                    b.Property<string>("TicketId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TicketId", "CategoryId")
                        .HasName("PK__TicketCa__D0BC55A783CF062B");

                    b.HasIndex(new[] { "CategoryId" }, "IX_TicketCategory_CategoryId");

                    b.ToTable("TicketCategory", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__UserRole__AF2760AD6F602E5A");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRole_RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Repositories.Core.Entities.Chat", b =>
                {
                    b.HasOne("Repositories.Core.Entities.User", "Receiver")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Chat_Receiver");

                    b.HasOne("Repositories.Core.Entities.User", "Sender")
                        .WithMany("ChatSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Chat_Sender");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Repositories.Core.Entities.Order", b =>
                {
                    b.HasOne("Repositories.Core.Entities.User", "Buyer")
                        .WithMany("Orders")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Order__BuyerId__4222D4EF");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Repositories.Core.Entities.OrderDetail", b =>
                {
                    b.HasOne("Repositories.Core.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__OrderDeta__Order__4AB81AF0");

                    b.HasOne("Repositories.Core.Entities.Ticket", "Ticket")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__OrderDeta__Ticke__4BAC3F29");

                    b.Navigation("Order");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Repositories.Core.Entities.Rating", b =>
                {
                    b.HasOne("Repositories.Core.Entities.User", "Seller")
                        .WithMany("RatingSellers")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Rating_Seller");

                    b.HasOne("Repositories.Core.Entities.User", "User")
                        .WithMany("RatingUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Rating_User");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repositories.Core.Entities.Revenue", b =>
                {
                    b.HasOne("Repositories.Core.Entities.User", "Seller")
                        .WithMany("Revenues")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Revenue__SellerI__44FF419A");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Repositories.Core.Entities.Ticket", b =>
                {
                    b.HasOne("Repositories.Core.Entities.User", "Seller")
                        .WithMany("Tickets")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Ticket__SellerId__47DBAE45");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Repositories.Core.Entities.User", b =>
                {
                    b.HasOne("Repositories.Core.Entities.SellConfig", "SellConfig")
                        .WithMany("Users")
                        .HasForeignKey("SellConfigId")
                        .HasConstraintName("FK__User__SellConfig__398D8EEE");

                    b.Navigation("SellConfig");
                });

            modelBuilder.Entity("TicketCategory", b =>
                {
                    b.HasOne("Repositories.Core.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__TicketCat__Categ__5165187F");

                    b.HasOne("Repositories.Core.Entities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK__TicketCat__Ticke__5070F446");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Repositories.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRole__RoleId__3F466844");

                    b.HasOne("Repositories.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRole__UserId__3E52440B");
                });

            modelBuilder.Entity("Repositories.Core.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repositories.Core.Entities.SellConfig", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Repositories.Core.Entities.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repositories.Core.Entities.User", b =>
                {
                    b.Navigation("ChatReceivers");

                    b.Navigation("ChatSenders");

                    b.Navigation("Orders");

                    b.Navigation("RatingSellers");

                    b.Navigation("RatingUsers");

                    b.Navigation("Revenues");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
